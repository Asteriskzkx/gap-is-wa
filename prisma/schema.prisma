// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BASIC
  FARMER
  AUDITOR
  COMMITTEE
  ADMIN
}

model User {
  userId         Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  hashedPassword String
  name           String
  role           UserRole @default(BASIC)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  farmer    Farmer?
  auditor   Auditor?
  committee Committee?
  admin     Admin?
}

model Farmer {
  farmerId             Int      @id @default(autoincrement())
  userId               Int      @unique
  user                 User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  namePrefix           String
  firstName            String
  lastName             String
  identificationNumber String   @unique
  birthDate            DateTime
  gender               String
  houseNo              String
  villageName          String
  moo                  Int
  road                 String
  alley                String
  subDistrict          String
  district             String
  provinceName         String
  zipCode              String
  phoneNumber          String
  mobilePhoneNumber    String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relation to RubberFarm
  rubberFarms RubberFarm[]
}

model Auditor {
  auditorId  Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  namePrefix String
  firstName  String
  lastName   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to AuditorInspection (many-to-many)
  auditorInspections AuditorInspection[]

  // Relation to Inspection as chief
  inspectionsAsChief Inspection[]
}

model Committee {
  committeeId Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  namePrefix  String
  firstName   String
  lastName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to CommitteeCertificate (many-to-many)
  committeeCertificates CommitteeCertificate[]
}

model Admin {
  adminId    Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  namePrefix String
  firstName  String
  lastName   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RubberFarm {
  rubberFarmId Int      @id @default(autoincrement())
  farmerId     Int
  farmer       Farmer   @relation(fields: [farmerId], references: [farmerId], onDelete: Cascade)
  villageName  String
  moo          Int
  road         String
  alley        String
  subDistrict  String
  district     String
  province     String
  location     Json // For GeoJSON data
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  plantingDetails PlantingDetail[]
  inspections     Inspection[]
}

model PlantingDetail {
  plantingDetailId Int        @id @default(autoincrement())
  rubberFarmId     Int
  rubberFarm       RubberFarm @relation(fields: [rubberFarmId], references: [rubberFarmId], onDelete: Cascade)
  specie           String
  areaOfPlot       Float
  numberOfRubber   Int
  numberOfTapping  Int
  ageOfRubber      Int
  yearOfTapping    DateTime
  monthOfTapping   DateTime
  totalProduction  Float
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Inspection {
  inspectionId          Int        @id @default(autoincrement())
  inspectionNo          Int
  inspectionDateAndTime DateTime
  inspectionType        String
  inspectionStatus      String
  inspectionResult      String
  auditorChiefId        Int
  auditorChief          Auditor    @relation(fields: [auditorChiefId], references: [auditorId])
  rubberFarmId          Int
  rubberFarm            RubberFarm @relation(fields: [rubberFarmId], references: [rubberFarmId])
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  // Relations
  auditorInspections AuditorInspection[]
  inspectionItems    InspectionItem[]
  dataRecord         DataRecord?
  adviceAndDefect    AdviceAndDefect?
  certificate        Certificate?
}

model AuditorInspection {
  auditorInspectionId Int        @id @default(autoincrement())
  auditorId           Int
  auditor             Auditor    @relation(fields: [auditorId], references: [auditorId])
  inspectionId        Int
  inspection          Inspection @relation(fields: [inspectionId], references: [inspectionId])
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@unique([auditorId, inspectionId]) // Ensure no duplicate entries
}

model InspectionItem {
  inspectionItemId     Int        @id @default(autoincrement())
  inspectionId         Int
  inspection           Inspection @relation(fields: [inspectionId], references: [inspectionId], onDelete: Cascade)
  inspectionItemNo     Int
  inspectionItemName   String
  inspectionItemResult String
  otherConditions      Json // Store list of strings as JSON
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relation to Requirement
  requirements Requirement[]
}

model Requirement {
  requirementId      Int            @id @default(autoincrement())
  inspectionItemId   Int
  inspectionItem     InspectionItem @relation(fields: [inspectionItemId], references: [inspectionItemId], onDelete: Cascade)
  requirementNo      Int
  requirementName    String
  requirementLevel   String
  requirementLevelNo String
  evaluationResult   String
  evaluationMethod   String
  note               String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model DataRecord {
  dataRecordId         Int        @id @default(autoincrement())
  inspectionId         Int        @unique
  inspection           Inspection @relation(fields: [inspectionId], references: [inspectionId], onDelete: Cascade)
  species              Json
  waterSystem          Json
  fertilizers          Json
  previouslyCultivated Json
  plantDisease         Json
  relatedPlants        Json
  moreInfo             String
  map                  Json // For GeoJSON data
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model AdviceAndDefect {
  adviceAndDefectId Int        @id @default(autoincrement())
  inspectionId      Int        @unique
  inspection        Inspection @relation(fields: [inspectionId], references: [inspectionId], onDelete: Cascade)
  date              DateTime
  adviceList        Json
  defectList        Json
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Certificate {
  certificateId Int        @id @default(autoincrement())
  inspectionId  Int        @unique
  inspection    Inspection @relation(fields: [inspectionId], references: [inspectionId], onDelete: Cascade)
  pdfFileUrl    String // Store S3 URL reference to the PDF file
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relation to CommitteeCertificate (many-to-many)
  committeeCertificates CommitteeCertificate[]
}

model CommitteeCertificate {
  committeeCertificateId Int         @id @default(autoincrement())
  committeeId            Int
  committee              Committee   @relation(fields: [committeeId], references: [committeeId])
  certificateId          Int
  certificate            Certificate @relation(fields: [certificateId], references: [certificateId])
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@unique([committeeId, certificateId]) // Ensure no duplicate entries
}
