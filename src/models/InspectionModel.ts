import { BaseModel } from "./BaseModel";
import { AuditorInspectionModel } from "./AuditorInspectionModel";
import { InspectionItemModel } from "./InspectionItemModel";
import { DataRecordModel } from "./DataRecordModel";
import { AdviceAndDefectModel } from "./AdviceAndDefectModel";

export class InspectionModel extends BaseModel {
  inspectionId: number;
  inspectionNo: number;
  inspectionDateAndTime: Date;
  inspectionTypeId: number;
  inspectionStatus: string;
  inspectionResult: string;
  auditorChiefId: number;
  rubberFarmId: number;

  // Relations
  inspectionType?: any;
  rubberFarm?: any;
  auditorChief?: any;
  auditorInspections?: AuditorInspectionModel[];
  inspectionItems?: InspectionItemModel[];
  dataRecord?: DataRecordModel;
  adviceAndDefect?: AdviceAndDefectModel;

  constructor(
    inspectionId: number,
    inspectionNo: number,
    inspectionDateAndTime: Date,
    inspectionTypeId: number,
    inspectionStatus: string,
    inspectionResult: string,
    auditorChiefId: number,
    rubberFarmId: number,
    createdAt: Date = new Date(),
    updatedAt: Date = new Date()
  ) {
    super(inspectionId, createdAt, updatedAt);
    this.inspectionId = inspectionId;
    this.inspectionNo = inspectionNo;
    this.inspectionDateAndTime = inspectionDateAndTime;
    this.inspectionTypeId = inspectionTypeId;
    this.inspectionStatus = inspectionStatus;
    this.inspectionResult = inspectionResult;
    this.auditorChiefId = auditorChiefId;
    this.rubberFarmId = rubberFarmId;
  }

  static create(
    inspectionNo: number,
    inspectionDateAndTime: Date,
    inspectionTypeId: number,
    inspectionStatus: string,
    inspectionResult: string,
    auditorChiefId: number,
    rubberFarmId: number
  ): InspectionModel {
    return new InspectionModel(
      0, // inspectionId will be generated by the database
      inspectionNo,
      inspectionDateAndTime,
      inspectionTypeId,
      inspectionStatus,
      inspectionResult,
      auditorChiefId,
      rubberFarmId
    );
  }

  validate(): boolean {
    return (
      this.inspectionNo > 0 &&
      this.inspectionTypeId > 0 &&
      this.inspectionStatus.trim().length > 0 &&
      this.inspectionResult.trim().length > 0 &&
      this.auditorChiefId > 0 &&
      this.rubberFarmId > 0
    );
  }

  toJSON(): Record<string, any> {
    return {
      inspectionId: this.inspectionId,
      inspectionNo: this.inspectionNo,
      inspectionDateAndTime: this.inspectionDateAndTime,
      inspectionTypeId: this.inspectionTypeId,
      inspectionStatus: this.inspectionStatus,
      inspectionResult: this.inspectionResult,
      auditorChiefId: this.auditorChiefId,
      rubberFarmId: this.rubberFarmId,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      inspectionType: this.inspectionType,
      rubberFarm: this.rubberFarm,
      auditorChief: this.auditorChief,
      auditorInspections:
        this.auditorInspections?.map((ai) => ai.toJSON()) || [],
      inspectionItems: this.inspectionItems?.map((item) => item.toJSON()) || [],
      dataRecord: this.dataRecord?.toJSON() || null,
      adviceAndDefect: this.adviceAndDefect?.toJSON() || null,
    };
  }
}
