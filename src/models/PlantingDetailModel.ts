import { BaseModel } from "./BaseModel";

export class PlantingDetailModel extends BaseModel {
    plantingDetailId: number;
    rubberFarmId: number;
    specie: string;
    areaOfPlot: number;
    numberOfRubber: number;
    numberOfTapping: number;
    ageOfRubber: number;
    yearOfTapping: Date;
    monthOfTapping: Date;
    totalProduction: number;

    constructor(
        plantingDetailId: number,
        rubberFarmId: number,
        specie: string,
        areaOfPlot: number,
        numberOfRubber: number,
        numberOfTapping: number,
        ageOfRubber: number,
        yearOfTapping: Date,
        monthOfTapping: Date,
        totalProduction: number,
        createdAt: Date = new Date(),
        updatedAt: Date = new Date()
    ) {
        super(plantingDetailId, createdAt, updatedAt);
        this.plantingDetailId = plantingDetailId;
        this.rubberFarmId = rubberFarmId;
        this.specie = specie;
        this.areaOfPlot = areaOfPlot;
        this.numberOfRubber = numberOfRubber;
        this.numberOfTapping = numberOfTapping;
        this.ageOfRubber = ageOfRubber;
        this.yearOfTapping = yearOfTapping;
        this.monthOfTapping = monthOfTapping;
        this.totalProduction = totalProduction;
    }

    static create(
        rubberFarmId: number,
        specie: string,
        areaOfPlot: number,
        numberOfRubber: number,
        numberOfTapping: number,
        ageOfRubber: number,
        yearOfTapping: Date,
        monthOfTapping: Date,
        totalProduction: number
    ): PlantingDetailModel {
        return new PlantingDetailModel(
            0, // plantingDetailId will be generated by the database
            rubberFarmId,
            specie,
            areaOfPlot,
            numberOfRubber,
            numberOfTapping,
            ageOfRubber,
            yearOfTapping,
            monthOfTapping,
            totalProduction
        );
    }

    validate(): boolean {
        return (
            this.rubberFarmId > 0 &&
            this.specie.trim().length > 0 &&
            this.areaOfPlot > 0 &&
            this.numberOfRubber > 0 &&
            this.ageOfRubber >= 0 &&
            this.yearOfTapping instanceof Date &&
            this.monthOfTapping instanceof Date
        );
    }

    toJSON(): Record<string, any> {
        return {
            plantingDetailId: this.plantingDetailId,
            rubberFarmId: this.rubberFarmId,
            specie: this.specie,
            areaOfPlot: this.areaOfPlot,
            numberOfRubber: this.numberOfRubber,
            numberOfTapping: this.numberOfTapping,
            ageOfRubber: this.ageOfRubber,
            yearOfTapping: this.yearOfTapping,
            monthOfTapping: this.monthOfTapping,
            totalProduction: this.totalProduction,
            createdAt: this.createdAt,
            updatedAt: this.updatedAt
        };
    }
}