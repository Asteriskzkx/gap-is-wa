import { BaseModel } from "./BaseModel";

export class RequirementModel extends BaseModel {
  requirementId: number;
  inspectionItemId: number;
  requirementMasterId: number;
  requirementNo: number;
  evaluationResult: string;
  evaluationMethod: string;
  note: string;

  constructor(
    requirementId: number,
    inspectionItemId: number,
    requirementMasterId: number,
    requirementNo: number,
    evaluationResult: string,
    evaluationMethod: string,
    note: string,
    createdAt: Date = new Date(),
    updatedAt: Date = new Date()
  ) {
    super(requirementId, createdAt, updatedAt);
    this.requirementId = requirementId;
    this.inspectionItemId = inspectionItemId;
    this.requirementMasterId = requirementMasterId;
    this.requirementNo = requirementNo;
    this.evaluationResult = evaluationResult;
    this.evaluationMethod = evaluationMethod;
    this.note = note;
  }

  static create(
    inspectionItemId: number,
    requirementMasterId: number,
    requirementNo: number,
    evaluationResult: string,
    evaluationMethod: string,
    note: string
  ): RequirementModel {
    return new RequirementModel(
      0, // requirementId will be generated by the database
      inspectionItemId,
      requirementMasterId,
      requirementNo,
      evaluationResult,
      evaluationMethod,
      note
    );
  }

  validate(): boolean {
    return (
      this.inspectionItemId > 0 &&
      this.requirementMasterId > 0 &&
      this.requirementNo > 0 &&
      this.evaluationResult.trim().length > 0 &&
      this.evaluationMethod.trim().length > 0
    );
  }

  toJSON(): Record<string, any> {
    return {
      requirementId: this.requirementId,
      inspectionItemId: this.inspectionItemId,
      requirementMasterId: this.requirementMasterId,
      requirementNo: this.requirementNo,
      evaluationResult: this.evaluationResult,
      evaluationMethod: this.evaluationMethod,
      note: this.note,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
    };
  }
}
